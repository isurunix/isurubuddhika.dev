<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Notes on Techie with a Conscience</title><link>https://isurubuddhika.dev/notes/</link><description>Recent content in Notes on Techie with a Conscience</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&amp;copy; 2023 [Isuru Buddhika Pathirana](/)</copyright><lastBuildDate>Fri, 22 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://isurubuddhika.dev/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>Designing a Rate Limiter</title><link>https://isurubuddhika.dev/notes/designing-a-rate-limiter/</link><pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate><guid>https://isurubuddhika.dev/notes/designing-a-rate-limiter/</guid><description>Designing a Rate Limiter Requirements Limit excessive requests Low latency Low memory foot print Should support distributed rate limiting Exception handling. Should show meaningful error message to user when being throttled High fault tolerance. Failure in rate-limiter should not affect the rest of the system High Level Design Decide where to place the limiter Client side rate limiter</description></item><item><title>Database Scaling</title><link>https://isurubuddhika.dev/notes/database-scaling/</link><pubDate>Sat, 16 Sep 2023 00:00:00 +0000</pubDate><guid>https://isurubuddhika.dev/notes/database-scaling/</guid><description>Database Scaling When a system grows it&amp;rsquo;s data also grows with it requiring the database to be scaled in order to handle loads of data. The two broad approches for scaling a database is vertical scaling and horizontal scaling. Same as in scaling an application server vertical database scaling refers to allocating more resources to the database server and horizonal scaling referes to techiniques like database replication and database sharding</description></item><item><title>Scaling for Millions of Users</title><link>https://isurubuddhika.dev/notes/scaling-for-million-users/</link><pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate><guid>https://isurubuddhika.dev/notes/scaling-for-million-users/</guid><description>Scaling for Millions of Users Scenario : A system that caters large number of users with a web front-end and a mobile app.
Things to consider
Choice of Database
For most cases relational database like MySQL would work Things to consider when going for NoSQL Application requires super law latency Unstructured data or data has no relations Need to store a massive amount of data Scale the application tier
Decide whether horizontal or vertical scaling Vertical scaling is limited by CPU, Memory, Space and cost Horizontal scaling require adding new components like load balancers and changing the application to be able to share load Scale the database (database-scaling)</description></item><item><title>Caching</title><link>https://isurubuddhika.dev/notes/caching-101/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://isurubuddhika.dev/notes/caching-101/</guid><description>Caching</description></item></channel></rss>