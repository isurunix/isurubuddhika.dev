[{"content":"Designing a Rate Limiter Requirements Limit excessive requests Low latency Low memory foot print Should support distributed rate limiting Exception handling. Should show meaningful error message to user when being throttled High fault tolerance. Failure in rate-limiter should not affect the rest of the system High Level Design Decide where to place the limiter Client side rate limiter ","permalink":"https://isurubuddhika.dev/notes/designing-a-rate-limiter/","summary":"Designing a Rate Limiter Requirements Limit excessive requests Low latency Low memory foot print Should support distributed rate limiting Exception handling. Should show meaningful error message to user when being throttled High fault tolerance. Failure in rate-limiter should not affect the rest of the system High Level Design Decide where to place the limiter Client side rate limiter ","title":"Designing a Rate Limiter"},{"content":"Database Scaling When a system grows it\u0026rsquo;s data also grows with it requiring the database to be scaled in order to handle loads of data. The two broad approches for scaling a database is vertical scaling and horizontal scaling. Same as in scaling an application server vertical database scaling refers to allocating more resources to the database server and horizonal scaling referes to techiniques like database replication and database sharding\nHowever as in every system design it all depends on the context. Before blindly jumping into replication or sharding there might be other possible optimization you could do to scale your database to support the load\nQuery Optimizations \u0026amp; Connection Pools Effectively these things are should be there from the begining if you are planning to cater to a large amount of requets with low latency. But it never hurts to pay the first attention to these basics and make sure things are in order.\nProper indexing Add redundant columns (denormalize data) to reduce join queries Use connection pooling and monitor/tweak connection pool capacity Vertical Scaling Vertical scaling refers to adding more resources to the database server to improve it\u0026rsquo;s performance and support the load. This can be either CPU/RAM or Disk depending on the requirement.\nPros Easier to do since there is zero configuration for the database. Simply increase the CPU/RAM/Disk for the server instance Powerful instances are already available via major cloud providers (Ex: Amazon RDS with 24TB of RAM) Note\nStackoverflow supported 10 million MAU with a single master database\nCons Single point of failure Limited by the possible maxed-out configuration for the server Cost Database Replication Database replication can be handy when you want to improve read performance for database queries. In most of the cases read operations are more frequent than write operations in the database. Replication allows us to distribute read operations between multiple instances thus reducing the load on the source node and improving read throughput.\nTo setup replication\nConfigure two or more database servers having the same schema Configure the DBMS to use one of the nodes as the source and others as replica nodes. replica nodes will receive copies of data from the source node and will only support read operations. All write operations should be directed to the source node.\nPros Improved performance as now we can perform multiple read operations in parallel from each replica node Improved reliability as multiple copies of data are available in case of a failure in one node High Availability can be achieved by having replicas in multiple locations Cons Single source configuration will not improve write performance significantly If the source server fails promoting a replica node as the new source could require some manual work Horizontal Scaling References:\nA Guide To Understanding Database Scaling Patterns - FreeCodeCamp How to set up replication in MySQL - DigitalOcean System Design Interview – An insider\u0026rsquo;s guide, Second Edition - Alex Xu ","permalink":"https://isurubuddhika.dev/notes/database-scaling/","summary":"Database Scaling When a system grows it\u0026rsquo;s data also grows with it requiring the database to be scaled in order to handle loads of data. The two broad approches for scaling a database is vertical scaling and horizontal scaling. Same as in scaling an application server vertical database scaling refers to allocating more resources to the database server and horizonal scaling referes to techiniques like database replication and database sharding","title":"Database Scaling"},{"content":"Scaling for Millions of Users Scenario : A system that caters large number of users with a web front-end and a mobile app.\nThings to consider\nChoice of Database\nFor most cases relational database like MySQL would work Things to consider when going for NoSQL Application requires super law latency Unstructured data or data has no relations Need to store a massive amount of data Scale the application tier\nDecide whether horizontal or vertical scaling Vertical scaling is limited by CPU, Memory, Space and cost Horizontal scaling require adding new components like load balancers and changing the application to be able to share load Scale the database (database-scaling)\nDatabase Replication Database Sharding Use Caching and CDN for static assets\nAvoid frequent calls to database Improve performance Make the application/web tier stateless\nMitigates issue with stateless web tier/sticky sessions Easier horizontal scaling Support multiple data centers\nGeo Routing Geo DNS Disaster Recovery Availability Decouple the components and make processes async, Introduce message queues\nRabbitMQ Kafka References:\nSystem Design Interview – An insider\u0026rsquo;s guide, Second Edition - Alex Xu ","permalink":"https://isurubuddhika.dev/notes/scaling-for-million-users/","summary":"Scaling for Millions of Users Scenario : A system that caters large number of users with a web front-end and a mobile app.\nThings to consider\nChoice of Database\nFor most cases relational database like MySQL would work Things to consider when going for NoSQL Application requires super law latency Unstructured data or data has no relations Need to store a massive amount of data Scale the application tier\nDecide whether horizontal or vertical scaling Vertical scaling is limited by CPU, Memory, Space and cost Horizontal scaling require adding new components like load balancers and changing the application to be able to share load Scale the database (database-scaling)","title":"Scaling for Millions of Users"},{"content":"I recently had the chance to start working with Apache Kafka as a part of a new module I\u0026rsquo;m working on at my workplace. So this is just me noting down my thoughts about my experience with Kafka as a series of articles.\nWhat is Apache Kafka? Apache Kafka is a popular distributed event processing or event streaming platform. Kafka contains three main capabilities under the hood, which we can use for our event streaming workloads. These capabilities are,\nAbility to publish (write) and subscribe (read) to event streams. Ability to store event streams reliably and durably for a configured amount of time. Ability to process events as they occur or retrospectively. Apart from that, what led to Kafka\u0026rsquo;s popularity was it\u0026rsquo;s highly-scalable, elastic, and fault-tolerant nature.\nIf you read up to this point, you would probably have the question of what the hell is Event Streaming in your head unless you have heard about it before. So let\u0026rsquo;s have a quick look into that before going any further.\nWhat is Event Streaming? To put it simply, think of a system continuously generating data. Each of these data points is considered an event, and when we capture those events as a continuous stream of events, it\u0026rsquo;s called an event stream.\nCapturing and storing these event streams durably for later retrieval; manipulating, processing, and reacting to the event streams in real-time as well as retrospectively; and routing the event streams to different destination technologies as required is known as event streaming.\nWhy Apache Kafka or Event Streaming/Processing So now we know what is Apache Kafka and what is Event Streaming/Processing is. Let\u0026rsquo;s now try to digest why do we need such things. We are all aware that purpose of most applications we develop is to recive some data, process them according given set of rules and provide a response or not. So let\u0026rsquo;s see how does Kafka fits into this.\nAs of today most of the applications we use rely on REST APIs for communication. REST provide us a way to talk to these applications over HTTP and it happens mostly in 3 steps. First a request is made and then the application processes that request. Then a response is sent back to the party which made the request and then they act upon the received response. This scenario works for most of the situations out there.\nBut think of an scenario where an application is producing 100s of events in a minute and we need these events to be processed by another application, or of a scenario where multiple applications are doing different actions based on a data received from another application. One key thing common to both scenarios is that data processing is not immediate and the system which ever is sending the data does not expect an immediate response from the downstream systems. So a usual REST based communication between systems won\u0026rsquo;t work for such scenarios since REST is all about synchronous request and response. And in first scenario it would be a pain to scale the application with growing number of events. So it\u0026rsquo;s clear that for cases like this we need a new way of doing thigs. This is where Kafka or in general event streaming and processing comes in. Kafka provides us a reliable location to write our data (events) and means for other applications to read and process these data asynchronously without having tight coupling between them.\nSo now we have an general idea about what is Kafka and why we need it. Let\u0026rsquo;s dive into more details about Kafka with the next article from this sereis. See you next time.\n","permalink":"https://isurubuddhika.dev/posts/apache-kafka-part-1/","summary":"I recently had the chance to start working with Apache Kafka as a part of a new module I\u0026rsquo;m working on at my workplace. So this is just me noting down my thoughts about my experience with Kafka as a series of articles.\nWhat is Apache Kafka? Apache Kafka is a popular distributed event processing or event streaming platform. Kafka contains three main capabilities under the hood, which we can use for our event streaming workloads.","title":"Apache Kafka Series : Introduction to Apache Kafka"},{"content":"Hi, I\u0026rsquo;m Isuru Buddhika Pathirana (He/Him), and I\u0026rsquo;m a Software Engineer.\nI primarily work with Java (Backend) but, I know my way around the complete stack.\nI used to hate React and love Angular but, now I love both equally. (maybe React a little bit more)\nYou might find me annoying if your code is not clean. I won\u0026rsquo;t accept your PRs unless those are clean and up to the standards.\nI occasionally write about my dev experiences, software engineering, open-source, and digital privacy. I\u0026rsquo;m more of a reader than a writer, so don\u0026rsquo;t expect frequent blogging. 😉\nYou can DM me on Twitter or contact me via hello\\at\\isurubuddhika\\dot\\me\n","permalink":"https://isurubuddhika.dev/about/","summary":"Hi, I\u0026rsquo;m Isuru Buddhika Pathirana (He/Him), and I\u0026rsquo;m a Software Engineer.\nI primarily work with Java (Backend) but, I know my way around the complete stack.\nI used to hate React and love Angular but, now I love both equally. (maybe React a little bit more)\nYou might find me annoying if your code is not clean. I won\u0026rsquo;t accept your PRs unless those are clean and up to the standards.","title":"About"},{"content":"I have always wanted to move away from wordpress and start writing my blogs in Markdown. Hell, I event thought of keeping the wordpress blog as it is and publish content off GitLab or GitHub to it.\nBut I always felt like it\u0026rsquo;s better to move on to a static site with my own domain. So finally I found the time to setup everything an get back on blogging again.\nLet\u0026rsquo;s see how would things turn out.\nYou can find my previous blog at https://d3vlogs.wordpress.com\n","permalink":"https://isurubuddhika.dev/posts/migrating-to-hugo/","summary":"I have always wanted to move away from wordpress and start writing my blogs in Markdown. Hell, I event thought of keeping the wordpress blog as it is and publish content off GitLab or GitHub to it.\nBut I always felt like it\u0026rsquo;s better to move on to a static site with my own domain. So finally I found the time to setup everything an get back on blogging again.","title":"Migrating to Hugo"},{"content":"Caching ","permalink":"https://isurubuddhika.dev/notes/caching-101/","summary":"Caching ","title":"Caching"}]